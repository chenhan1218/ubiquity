#!/bin/sh

# I'm sure replicating much of debian/rules is entirely wrong, but I'm going to
# do it anyway...

if ! dpkg-checkbuilddeps; then
	sudo apt-get -y build-dep ubiquity
fi

for p in python-pyicu debconf-utils; do
	if [ ! -e /var/lib/dpkg/info/$p.list ]; then
		sudo apt-get -y install python-pyicu debconf-utils
		break
	fi
done

if [ ! -e d-i/source ]; then
	make -C d-i update
	make -C d-i build
fi
rebuild=false
# TODO if --debconf in args
if [ ! -e d-i/templates ]; then
	# For debian-installer-utils
	DEB_HOST_ARCH_OS=$(dpkg-architecture -qDEB_HOST_ARCH_OS) \
	fakeroot make -C d-i install
	rebuild=:
fi
# For loading the console-setup plugin.  This is needed for at least testing
# loading of plugins.
[ -e ubiquity/keyboard_names.py ] || ./debian/rules ubiquity/keyboard_names.py

[ -e tests/debconf-stamp ] || rebuild=:
if ! $rebuild && [ -e tests/debconfdb ]; then
	for x in d-i/templates debian/ubiquity.templates \
		debian/ubiquity.templates-imported; do
		if [ $x -nt tests/debconf-stamp ]; then
			rebuild=:
			break
		fi
	done
else
	rebuild=:
fi
$rebuild && (cat d-i/templates; echo;
	po2debconf debian/ubiquity.templates; echo;
	po2debconf debian/ubiquity.templates-imported \
		--podir=debian/imported-po) > tests/debconfdb
    touch tests/debconf-stamp

export DEBCONF_SYSTEMRC=tests/debconf.conf
$rebuild && debconf-loadtemplate ubiquity tests/debconfdb
[ -e ubiquity/Makefile ] || (./configure && cd ubiquity; make)
# For log-output
export PATH="d-i/source/debian-installer-utils:$PATH"

# SUDO UID and SUDO_GID are for KDE
SUDO_UID=$(id -u) \
SUDO_GID=$(id -g) \
UBIQUITY_PATH=. \
UBIQUITY_PLUGIN_PATH=ubiquity/plugins \
PIXMAPS=desktop \
UBIQUITY_GLADE=gui/gtk \
fakeroot xvfb-run ./tests/run-frontend

# TODO do something like the deferred stuff in the usb-creator next branch.
# TODO rewrite this in Python, and generate the list of tests from here.
